算法： 

    AVL树
        AVL（Adelson-Velskii and Landis）树是带有平衡条件（balance condition）的二叉查找树。
        这个平衡条件必须容易保持，而且必须保证树的深度是O(logN)。
        AVL树规定其每个结点的左子树和右子树的高度最多差1。
        BF(Balance Factor) = 二叉树上结点的左子树深度 - 右子树的深度。
        平衡二叉树上的结点的BF值只能是1 -1 0，只要有一个结点的平衡因子绝对值大于1，就不平衡。
        构造AVL树的时候，发生不平衡时：

        单向右旋平衡处理RR： 
        由于在a的左子树的左子树进行插入（LL）则需进行一次右旋转操作（R）；

        单向左旋平衡处理LL： 
        由于在a的右子树的右子树上插入（RR），则需进行一次左旋转操作（L）；

        双向旋转（先左后右）平衡处理LR： 
        由于在a的左子树的右子树上插入结点（LR），则需进行两次旋转（先左旋后右旋）操作（LR）。

        双向旋转（先右后左）平衡处理RL： 
        由于在a的右子树左子树上插入结点(RL)，则需进行两次旋转（先右旋后左旋）操作(RL)。

        附：双向旋转的步骤： 
        1.把子结点的BF值通过旋转变成与根节点符号相同（以子结点为中心旋转）。 
        2.以根节点为中心旋转。 
    红黑树
        规则：
        每个节点都有红色或黑色
        树的根始终是黑色的 (黑土地孕育黑树根，😄)
        没有两个相邻的红色节点（红色节点不能有红色父节点或红色子节点，并没有说不能出现连续的黑色节点）
        从节点（包括根）到其任何后代NULL节点(叶子结点下方挂的两个空节点，并且认为他们是黑色的)的每条路径都具有相同数量的黑色节点
        瞬间懵逼？了解一下印象就行，开始玩魔方都是要照着魔方公式一点点玩的，多玩几次就熟悉了。红黑树也一样，红黑树有两大操作:
        recolor (重新标记黑色或红色)
        rotation (旋转，这是树达到平衡的关键) 我们会先尝试 recolor，如果 recolor 不能达到红黑树的 4 点要求，然后我们尝试 rotation，其实红黑树的关键玩法就是弄清楚 recolor 和 rotation 的规则，
        接下来看看详细的算法公式吧 千万别着急记忆公式，有图示会逐步说明，就像魔方一样，多玩几次就懂了: 假设我们插入的新节点为 X



    总算法


        记住稳定性的方法 就是通过 3，3，2这三个数字来进行比较，
        排序法	平均时间	最差情形	稳定度	额外空间	备注
        冒泡	O(n2)	    O(n2)	  稳定	   O(1)	   n小时较好
        选择	O(n2)	    O(n2)	  不稳定   O(1)	   n小时较好
        插入	O(n2)	    O(n2)	   稳定	   O(1)	   大部分已排序时较好
        基数	O(logRB)	O(logRB)	稳定	O(n)	
        B是真数(0-9)，
        R是基数(个十百)
        Shell	O(nlogn)	O(ns) 1<s<2	不稳定	O(1)	s是所选分组
        快速	O(nlogn)	O(n2)	不稳定	O(nlogn)	n大时较好
        归并	O(nlogn)	O(nlogn)	稳定	O(1)	n大时较好
        堆	O(nlogn)	O(nlogn)	不稳定	O(1)	n大时较好