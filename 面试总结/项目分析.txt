加密解密的问题
    对称加密算法、不对称加密算法、不可逆加密算法
    Base64加密解密 “Base64是网络上最常见的用于传输8Bit字节码的编码方式之一，Base64就是一种基于64个可打印字符来表示二进制数据的方法”。



ECS 项目说明
    基本解释：
       - 每个可能单独使用的对象属性归纳为一个 Component。而 Component 之间可以组合在一起作为 System 筛选的标准
       - 每个 Entity 是由多个 Component 组合而成，共享一个生命期，
            一个 Entity 只具备这组 Component 中的一部分，就不会进入这个筛选集合，也就不被这个 System 所关心了
       - 以定义一个 System 关心某一个固定 Component 的组合
    原理： 
        关于CPU的存储结构: CPU从内存直接读取数据需要花费许多时间，所以出现了多级缓存，缓存级别越小，读取速度更快

        关于CPU的读取方法: 处理过程中，如果CPU能在缓冲中找到数据称为cache hit 缓存命中, 
                        反之找不到的话称之为cache miss 缓存缺失

        SIMD单指令多数据流，
            能够复制多个操作数，并把它们打包在大型寄存器的一组指令集。
        这个也是我项目里面没有处理的 比如transform 里的 x/y/z,x/y/z 处理 
            我们可以设计成 xxxxxx / yyyyy /zzzzzz 内存对齐的情况下优化（保证优化数据结构存储，尤其是栈上）
    优势：
       - 游戏的业务循环就是在调用很多不同的系统，
         每个系统自己遍历自己感兴趣的对象，只有预定义的组件部分可以被子系统感知到，这样每个系统就能具备很强的内聚性
       - OO 或 Actor 强调的是对象自身处理自身的业务，然后框架去管理对象的集合，负责用消息驱动它们。
         而在 ECS 中，每个系统关注的是不同的对象集合，它处理的对象中有共性的切片。 
         比如说：
            这类游戏关注的是对象间的关系，比如 A 攻击了 B 对 B 造成了伤害，这件事情是在 A 和 B 之间发生的，
            在传统模型中，你会纠结于伤害计算到底在 A 对象的方法中完成还是在 B 的方法中完成。
            而在 ECS 中不需要纠结，因为它可以在伤害计算这个 System 中完成，这个 System 关注的是所有对象中，和伤害的产生有关的那一小部分数据的集合

        基本的类
        View：  添加回调函数 
        Register：Sytem的容器 Entity的集合
        System: 处理事件/添加/获取/判断是否Component/